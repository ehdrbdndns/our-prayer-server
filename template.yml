Transform: AWS::Serverless-2016-10-31

Resources:
  jwt:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./layer/jwt
      CompatibleArchitectures:
        - arm64
      CompatibleRuntimes:
        - nodejs22.x
    Metadata:
      BuildMethod: nodejs22.x
      BuildArchitecture: arm64
  mysql2:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./layer/mysql2
      CompatibleArchitectures:
        - arm64
      CompatibleRuntimes:
        - nodejs22.x
    Metadata:
      BuildMethod: nodejs22.x
      BuildArchitecture: arm64
  user:
    Type: AWS::Serverless::Function
    # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: ./function/user
      Handler: handler.handler
      Runtime: nodejs22.x
      Environment:
        Variables:
          NODE_OPTIONS: '--enable-source-maps'
      MemorySize: 3008
      Timeout: 30
      Architectures:
        - arm64
      Layers:
        - !Ref mysql2
        - !Ref jwt
      Events:
        ourprayerPOSTuserauth:
          Type: Api
          Properties:
            Path: /user/auth
            Method: POST
            RestApiId: !Ref ourprayer
    # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-using-build-typescript.html
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - handler.ts
        External:
          - '@aws-sdk/*'
          - aws-sdk
          - customMysql
          - customJwt
          - esbuild
          - mysql2
  bible:
    Type: AWS::Serverless::Function
    # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: ./function/bible
      Handler: handler.handler
      Runtime: nodejs22.x
      Environment:
        Variables:
          NODE_OPTIONS: '--enable-source-maps'
      MemorySize: 3008
      Timeout: 30
      Architectures:
        - arm64
      Layers:
        - !Ref mysql2
        - !Ref jwt
      Events:
        ourprayerGETbible:
          Type: Api
          Properties:
            Path: /bible
            Method: GET
            RestApiId: !Ref ourprayer
    # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-using-build-typescript.html
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - handler.ts
        External:
          - '@aws-sdk/*'
          - aws-sdk
          - customMysql
          - customJwt
          - esbuild
  ourprayer:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: ourprayer
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /user/auth:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${user.Arn}/invocations
              responses: {}
          /bible:
            get:
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${bible.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 86400
        AllowOrigin: '''*'''
        AllowHeaders: '''Authorization, Content-Type, Access-Control-Allow-Origin'''
        AllowMethods: '''POST, GET, OPTIONS'''
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Layer
      Members:
        - jwt
        - mysql2